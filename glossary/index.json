{
  "AJAX": {
    "description": "AJAX (Asynchronous JavaScript And XML) is a programming practice of combining HTML, CSS, JavaScript, the DOM, and the XMLHttpRequest object to build more complex webpages.  What AJAX allows you to do is just update parts of a webpage instead of having to reload the entire page. AJAX also lets you work asynchronously, meaning your code continues to run while that part of your webpage is trying to reload (compared to synchronously which will block your code from running until that part of your webpage is done reloading).",
    "links": [
      "https://developer.mozilla.org/en-US/docs/Glossary/AJAX"
    ]
  },
  "API": {
    "description": ""
  },
  "Browser": {
    "description": "A Web Browser"
  },
  "Class": {
    "description": "In object-oriented programming, a class defines an object's characteristics. Class is a template definition of an object's properties and methods, the \"blueprint\" from which other more specific instances of the object are drawn.",
    "links": [
      "https://developer.mozilla.org/en-US/docs/Glossary/Class"
    ]
  },
  "Client": {
    "description": ""
  },
  "Closure": {
    "description": ""
  },
  "DOM Node": {
    "description": ""
  },
  "Falsy": {
    "description": "A falsy value is a value that translates to false when evaluated in a Boolean context.",
    "links": [
      "https://developer.mozilla.org/en-US/docs/Glossary/Falsy"
    ]
  },
  "Form": {
    "description": ""
  },
  "HTTP Request": {
    "description": ""
  },
  "HTTP Response": {
    "description": ""
  },
  "JavaScript": {
    "description": ""
  },
  "Key": {
    "description": ""
  },
  "module": {
    "description": "A General term meaning an part of something"
  },
  "NaN": {
    "description": "a specific object in JavaScript representing 'Not A Number'"
  },
  "Node": {
    "description": "Node is a generic term. See 'Node.js' or 'DOM Node'"
  },
  "Node Module": {
    "description": ""
  },
  "Node.js": {
    "description": ""
  },
  "params": {
    "description": "parameters"
  },
  "Parse": {
    "description": "The act of converting a serlized source of data into usable objects in a programming language"
  },
  "Parser": {
    "description": "A tool for parsing a string into something else"
  },
  "query": {
    "description": "A question made to a program with the expectation of recieving a response"
  },
  "Script": {
    "description": ""
  },
  "Serialize": {
    "links": [
      "https://developer.mozilla.org/en-US/docs/Glossary/Serialize"
    ]
  },
  "Server": {
    "links": [
      "https://developer.mozilla.org/en-US/docs/Glossary/Server"
    ]
  },
  "SQL": {
    "description": ""
  },
  "SQL Injection": {
    "description": ""
  },
  "Syntax": {
    "description": "Syntax specifies the required combination and sequence of characters making up correctly structured code. Syntax varies from language to language (e.g., syntax is different in HTML and JavaScript). Syntax applies both to programming languages (commands to the computer) and markup languages (document structure information).\n\nSyntax only governs ordering and structure; the instructions must also be meaningful, which is the province of semantics.\n\nCode must have correct syntax in order to compile correctly, otherwise a syntax error occurs. Even small errors, like a missing parenthesis, can keep source code from compiling.\n\nFrameworks are said to have a \"clean\" syntax if they produce simple, readable, concise results. If a codebase uses \"a lot of syntax\", it requires more characters to achieve the same functionality.",
    "links": [
      "https://developer.mozilla.org/en-US/docs/Glossary/Syntax"
    ]
  },
  "Syntax error": {
    "description": "An exception caused by the incorrect use of a pre-defined syntax. Syntax errors are detected while compiling or parsing source code.\n\nFor example, if you leave off a closing brace (}) when defining a JavaScript function, you trigger a syntax error.  Browser development tools display JavaScript and CSS syntax errors in the console.\n",
    "links": [
      "https://developer.mozilla.org/en-US/docs/Glossary/Syntax_error"
    ]
  },
  "Truthy": {
    "description": "In JavaScript, a truthy value is a value that is considered true when evaluated in a Boolean context. All values are truthy unless they are defined as falsy (i.e., except for false, 0, \"\", null, undefined, and NaN).",
    "links": [
      "https://developer.mozilla.org/en-US/docs/Glossary/Truthy"
    ]
  },
  "undefined": {
    "description": "A primitive value automatically assigned to variables that have just been declared or to formal arguments for which there are no actual arguments.",
    "links": [
      "https://developer.mozilla.org/en-US/docs/Glossary/undefined"
    ]
  },
  "URI": {
    "description": "A URI (Uniform Resource Identifier) is a string that refers to a resource. The most common are URLs, which identify the resource by giving its location on the Web. URNs, by contrast, refer to a resource by a name, in a given namespace, e.g. the ISBN of a book.",
    "links": [
      "https://developer.mozilla.org/en-US/docs/Glossary/URI"
    ]
  },
  "URL": {
    "description": "Uniform Resource Locator (URL) is a text string specifying where a resource can be found on the Internet.\n\nIn the context of HTTP, URLs are called \"Web address\" or \"link\". Your browser displays URLs in its address bar, for example https://developer.mozilla.org\n\nURLs can also be used for file transfer (FTP) , emails (SMTP), and other applications.",
    "links": [
      "https://developer.mozilla.org/en-US/docs/Glossary/URL"
    ]
  },
  "URL Query Params": {
    "description": "The part of a URL that follows the path, seperated by a questionmark"
  },
  "User agent": {
    "description": "A user agent is a computer program representing a person, for example, a browser in a Web context.\n\nBesides a browser, a user agent could be a bot scraping webpages, a download manager, or another app accessing the Web. Along with each request they make to the server, browsers include a self-identifying User-Agent HTTP header called a user agent (UA) string. This string often identifies the browser, its version number, and its host operating system.\n\nSpam bots, download managers, and some browsers often send a fake UA string to announce themselves as a different client. This is known as user agent spoofing.\n\nThe user agent string can be accessed with JavaScript on the client side using navigator.userAgent.\n\nA typical user agent string looks like this: \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:35.0) Gecko/20100101 Firefox/35.0\". ",
    "links": [
      "https://developer.mozilla.org/en-US/docs/Glossary/User_agent"
    ]
  }
}